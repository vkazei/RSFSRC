from __future__ import division
from rsf.proj import *

# Sigmoid

Flow('spike1',None,'spike n1=50 o1=-5 d1=%g | math output=x1'%(10/49))
Flow('sigmaspike1','spike1','math output="1/(1+exp(-input))"')
Flow('spike2',None,'spike n1=80 o1=-6 d1=%g | math output=x1'%(12/78))
Flow('sigmaspike2','spike2','math output="1/(1+exp(-input))"')
Plot('sigmaspike1','graph grid=y label1= unit1= title="Sigmoid function" max1=6.3 min1=-6.3')
Plot('sigmaspike2','graph wanttile=n wantaxis=n label1= unit1= dash=2 title="Sigmoid function" max1=6.3 min1=-6.3')
Result('sigma','sigmaspike1 sigmaspike2','Overlay')

# Tanh

Flow('tanhspike1','spike1','math output="(exp(input)-exp(-input))/(exp(input)+exp(-input))"')
Flow('tanhspike2','spike2','math output="(exp(input)-exp(-input))/(exp(input)+exp(-input))"')
Plot('tanhspike1','graph grid=y label1= unit1= title="Tanh function" max1=6.3 min1=-6.3')
Plot('tanhspike2','graph wanttile=n wantaxis=n label1= unit1= dash=2 title="Tanh function" max1=6.3 min1=-6.3')
Result('tanh','tanhspike1 tanhspike2','Overlay')

# ReLU

Flow('maskspike1','spike1','mask min=0 | dd type=float')
Flow('maskspike2','spike2','mask min=0 | dd type=float')
Flow('reluspike1','spike1 maskspike1','mul ${SOURCES[1]}')
Flow('reluspike2','spike2 maskspike2','mul ${SOURCES[1]}')
Plot('reluspike1','graph grid=y label1= unit1= title="ReLU function" max1=6.3 min1=-6.3')
Plot('reluspike2','graph wanttile=n wantaxis=n label1= unit1= dash=2 title="ReLU function" max1=6.3 min1=-6.3')
Result('relu','reluspike1 reluspike2','Overlay')

# Load and process data

# download well-log data
Fetch('R-39.las','1808_Neural_networks',
      server='https://raw.githubusercontent.com',
      top='seg/tutorials-2018/master')

# Convert to RSF
Flow('R-39','R-39.las','las2rsf $SOURCE $TARGET',stdin=0,stdout=-1)

# Examine with "< R-39.rsf sfheaderattr segy=n desc=y"

# Skip the ends of the logs
for case in ('DT4P','DT4S','RHOB','DEPT'):
    Flow(case,'R-39','headermath output=%s segy=n | window n2=7743' % case)

Flow('VP1','DT4P','math output="1e6/input"')
Flow('VS1','DT4S','math output="1e6/input"')

# Replace dodgy data in the VS log with mean
Flow('VSmask','VS1','mask max=0 | dd type=float')
Flow('VSmaskpos','VSmask','math output="1-input" | dd type=float')
Flow('VSpos','VS1 VSmaskpos','mul ${SOURCES[1]}')
Flow('VSneg','VSmask','math output="input*1973.8"')
Flow('VS2','VSpos VSneg','add ${SOURCES[1]}')

# Take every 5th sample
Flow('VP','VP1','window j1=5 | window n1=501')
Flow('VS','VS2','window j1=5 | window n1=501')
Flow('RHO','RHOB','window j1=5 | window n1=501')
Flow('DEPTH','DEPT','window j1=5 | window n1=501')

# Make upper layers and normalize

Flow('VPupwn','VP','window n1=500 | rtoc')
Flow('VSupwn','VS','window n1=500 | rtoc')
Flow('RHOupwn','RHO','window n1=500 | rtoc')

Flow('VPup','VP','window n1=500 | math output="(input-3461.27)/393.466"')
Flow('VSup','VS','window n1=500 | math output="(input-1905.71)/248.724"')
Flow('RHOup','RHO','window n1=500 | math output="(input-2455.2)/109.047"')
Flow('DEPTHup','DEPTH','window n1=500')

# Make lower layers and normalize
Flow('VPlowwn','VP','window f1=1 n1=500 | rtoc')
Flow('VSlowwn','VS','window f1=1 n1=500 | rtoc')
Flow('RHOlowwn','RHO','window f1=1 n1=500 | rtoc')

Flow('VPlow','VP','window f1=1 n1=500 | math output="(input-3461.43)/393.381"')
Flow('VSlow','VS','window f1=1 n1=500 | math output="(input-1905.76)/248.718"')
Flow('RHOlow','RHO','window f1=1 n1=500 | math output="(input-2455.9)/108.041"')
Flow('DEPTHlow','DEPTH','window f1=1 n1=500')

# Angle of incidence

def theta(target=None,source=None,env=None):
    'Angle of incidence'
    import numpy, m8r
    numpy.random.seed(42)
    min_theta=0
    max_theta=20
    n=500
    theta = numpy.random.random(n)*(max_theta-min_theta)+min_theta
   
    rsf = m8r.Output(str(target[0]))
    rsf.put("n1",n)
    rsf.put("o1",0)
    rsf.put("d1",1)
    rsf.write(theta)
    rsf.close()
    return 0

Command('thetawn.rsf',None,action=Action(theta))
Flow('theta','thetawn','math output="(input-9.97123)/5.97377"')

#Flow('thetawn',None,'spike o1=0.10123167692437374 n1=500 d1=0.03959531912 | math output=x1 | put o1=0 d1=1')
#Flow('theta',None,'spike o1=0.10123167692437374 n1=500 d1=0.03959531912 | math output=x1 | put o1=0 d1=1 | math output="(input-9.98026)/5.7208"')

# Create training data
Flow('X','VPup VSup RHOup VPlow VSlow RHOlow theta','cat ${SOURCES[1:7]} axis=2')

# Create training label

# Zoeppritz solution for P-P reflectivity
from math import pi
Flow('theta1','thetawn','math output="input*%g/180" | rtoc'%(pi))
Flow('p','theta1 VPupwn','math x=${SOURCES[0]} y=${SOURCES[1]} output="sin(x)/y"')
Flow('theta2','p VPlowwn','math x=${SOURCES[0]} y=${SOURCES[1]} output="asin(x*y)"')
Flow('phi1','p VSupwn','math x=${SOURCES[0]} y=${SOURCES[1]} output="asin(x*y)"')
Flow('phi2','p VSlowwn','math x=${SOURCES[0]} y=${SOURCES[1]} output="asin(x*y)"')
Flow('a','RHOlowwn phi2 RHOupwn phi1','math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*(1-2*sin(y)^2)-z*(1-2*sin(t)^2)"')
Flow('b','RHOlowwn phi2 RHOupwn phi1','math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*(1-2*sin(y)^2)+2*z*sin(t)^2"')
Flow('c','RHOupwn phi1 RHOlowwn phi2','math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*(1-2*sin(y)^2)+2*z*sin(t)^2"')   
Flow('d','RHOlowwn VSlowwn RHOupwn VSupwn','math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="2*(x*y^2-z*t^2)"')
Flow('E','theta1 VPupwn theta2 VPlowwn b c','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="(k*cos(x)/y)+(m*cos(z)/t)"')
Flow('F','phi1 VSupwn phi2 VSlowwn b c','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="(k*cos(x)/y)+(m*cos(z)/t)"')
Flow('G','a d theta1 VPupwn phi2 VSlowwn','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="x-y*cos(z)/t*cos(k)/m"')
Flow('H','a d theta2 VPlowwn phi1 VSupwn','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="x-y*cos(z)/t*cos(k)/m"')
Flow('D','E F G H p','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*y+z*t*k^2"')
Flow('rpp','D F b theta1 VPupwn c theta2 VPlowwn H p a d phi2 VSlowwn','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} l=${SOURCES[6]} n=${SOURCES[7]} o=${SOURCES[8]} p=${SOURCES[9]} q=${SOURCES[10]} r=${SOURCES[11]} s=${SOURCES[12]} f=${SOURCES[13]} output="(1/x) * (y*(z*(cos(t)/k) - m*(cos(l)/n)) - o*p^2 * (q + r*(cos(t)/k)*(cos(s)/f)))" | real') 

# Plot to QC

for case in ('VP','VS','RHO'):
   graph=''
   if case=='VP':
      graph+='plotcol=6 title="Vp" label2=Vp unit2="m/s"'
   if case=='VS':
      graph+='plotcol=5 title="Vs" label2=Vs unit2="m/s"'
   if case=='RHO':
      graph+='plotcol=4 title="Rho" label2=Rho unit2="kg/m3"'
   if case=='rpp':
      graph+='plotcol=7 title="Rpp" label2= unit2='   
   Plot(case,['DEPTH',case],
         '''
         cmplx ${SOURCES[1]} | window |
         graph grid=y transp=y yreverse=y label1=Depth unit1=m labelsz=12
         ''' + graph)
Plot('rpp','put o1=2193.04 d1=0.762 | graph transp=y grid=y yreverse=y symbol=* symbolsz=10 labelsz=12 label2= unit2= title="Rpp" label1=Depth unit1=m min2=-0.4 max2=0.4')

Result('QC','VP VS RHO rpp','SideBySideAniso')

# Split into training and validation set

Flow('Xtrain1 Ytrain1','X rpp','shuffle3 seed=42 axis=1 pi2=${SOURCES[1]} po2=${TARGETS[1]}')
Flow('Xtrain','Xtrain1','transp | window n1=400')
Flow('Ytrain','Ytrain1','transp | window n1=400')

def numpy_load(target=None,source=None,env=None):
    'convert from numpy to RSF format'
    import numpy, m8r
    data = numpy.load(str(source[0]))
    data = data.astype('float64')
    #print(data.dtype)
    rsf = m8r.Output(str(target[0]))
    rsf.put("n2",data.shape[0])
    rsf.put("o2",2193.04)
    rsf.put("d2",0.762)
    rsf.put("n1",data.shape[1])
    rsf.put("o1",0)
    rsf.put("d1",1)
    rsf.put("label2","Time")
    rsf.put("unit2","s")
    rsf.write(data)
    rsf.close()
    return 0

def numpy_load2(target=None,source=None,env=None):
    'convert from numpy to RSF format'
    import numpy, m8r
    data = numpy.load(str(source[0]))
    data=data.astype('float64')
    rsf = m8r.Output(str(target[0]))
    rsf.put("n1",data.shape[0])
    rsf.put("o1",2193.04)
    rsf.put("d1",0.762)
    rsf.put("n2",1)
    rsf.put("o2",0)
    rsf.put("d2",1)
    rsf.put("label1","Time")
    rsf.put("unit1","s")
    rsf.write(data)
    rsf.close()
    return 0

# Load prepared data

Command('Xtrain-1-1.rsf','X_train.npy',action=Action(numpy_load))
Command('Ytrain-1.rsf','y_train.npy',action=Action(numpy_load2))
Command('Yval-1.rsf','y_val.npy',action=Action(numpy_load2))
Command('Xval-1-1.rsf','X_val.npy',action=Action(numpy_load))
Command('Xblind-1-1.rsf','X_blind.npy',action=Action(numpy_load))
Command('Yblind-1.rsf','y_blind.npy',action=Action(numpy_load2))

Flow('Xtrain-1','Xtrain-1-1','transp')
Flow('Xval-1','Xval-1-1','transp')
Flow('Xblind-1','Xblind-1-1','transp')

# Create patch
Flow('Xtrainpatch','Xtrain','sfpatch w=1,7 p=400,1')

Flow('Ytrainpatch','Ytrain','sfpatch w=1,1 p=400,1 | spray n=1 axis=2')

Flow('Xtrainpatch2','Xtrain','sfpatch w=100,7')

Flow('Ytrainpatch2','Ytrain','sfpatch w=100,1 | spray n=1 axis=2')

Flow('Xtrainpatch3','Xtrain','sfpatch w=20,7')

Flow('Ytrainpatch3','Ytrain','sfpatch w=20,1 | spray n=1 axis=2')

# Validation data
Flow('Xval','Xtrain1','transp | window f1=400')
Flow('Yval','Ytrain1','transp | window f1=400')

# Testing set

# Take every 5th sample
Flow('VPtest','VP1','window j1=5 | window f1=1348')
Flow('VStest','VS2','window j1=5 | window f1=1348')
Flow('RHOtest','RHOB','window j1=5 | window f1=1348')
Flow('DEPTHtest','DEPT','window j1=5 | window f1=1348')

# Make upper layers and normalize with training scaler

Flow('VPupwntest','VPtest','window n1=200 | rtoc')
Flow('VSupwntest','VStest','window n1=200 | rtoc')
Flow('RHOupwntest','RHOtest','window n1=200 | rtoc')

Flow('VPuptest','VPtest','window n1=200 | math output="(input-3461.27)/393.466"')
Flow('VSuptest','VStest','window n1=200 | math output="(input-1905.71)/248.724"')
Flow('RHOuptest','RHOtest','window n1=200 | math output="(input-2455.2)/109.047"')
Flow('DEPTHuptest','DEPTHtest','window n1=200')

# Make lower layers and normalize with training scaler
Flow('VPlowwntest','VPtest','window f1=1 n1=200 | rtoc')
Flow('VSlowwntest','VStest','window f1=1 n1=200 | rtoc')
Flow('RHOlowwntest','RHOtest','window f1=1 n1=200 | rtoc')

Flow('VPlowtest','VPtest','window f1=1 n1=200 | math output="(input-3461.43)/393.381"')
Flow('VSlowtest','VStest','window f1=1 n1=200 | math output="(input-1905.76)/248.718"')
Flow('RHOlowtest','RHOtest','window f1=1 n1=200 | math output="(input-2455.9)/108.041"')
Flow('DEPTHlowtest','DEPTHtest','window f1=1 n1=200')

# Create testing data
Flow('Xtest','VPuptest VSuptest RHOuptest VPlowtest VSlowtest RHOlowtest thetatest','cat ${SOURCES[1:7]} axis=2')

Flow('Xtestwn','VPupwntest VSupwntest RHOupwntest VPlowwntest VSlowwntest RHOlowwntest thetawntest','cat ${SOURCES[1:7]} axis=2')

# Angle of incidence

Flow('thetawntest',None,'spike o1=0 n1=200 d1=1 | math output=30 | put o1=0 d1=1')
Flow('thetatest',None,'spike o1=0 n1=200 d1=1 | math output=30 | put o1=0 d1=1 | math output="(input-9.98026)/5.7208"')

# Create true testing label
Flow('theta1test','thetawntest','math output="input*%g/180" | rtoc'%(pi))
Flow('ptest','theta1test VPupwntest','math x=${SOURCES[0]} y=${SOURCES[1]} output="sin(x)/y"')
Flow('theta2test','ptest VPlowwntest','math x=${SOURCES[0]} y=${SOURCES[1]} output="asin(x*y)"')
Flow('phi1test','ptest VSupwntest','math x=${SOURCES[0]} y=${SOURCES[1]} output="asin(x*y)"')
Flow('phi2test','ptest VSlowwntest','math x=${SOURCES[0]} y=${SOURCES[1]} output="asin(x*y)"')
Flow('atest','RHOlowwntest phi2test RHOupwntest phi1test','math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*(1-2*sin(y)^2)-z*(1-2*sin(t)^2)"')
Flow('btest','RHOlowwntest phi2test RHOupwntest phi1test','math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*(1-2*sin(y)^2)+2*z*sin(t)^2"')
Flow('ctest','RHOupwntest phi1test RHOlowwntest phi2test','math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*(1-2*sin(y)^2)+2*z*sin(t)^2"')
Flow('dtest','RHOlowwntest VSlowwntest RHOupwntest VSupwntest','math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="2*(x*y^2-z*t^2)"')
Flow('Etest','theta1test VPupwntest theta2test VPlowwntest btest ctest','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="(k*cos(x)/y)+(m*cos(z)/t)"')
Flow('Ftest','phi1test VSupwntest phi2test VSlowwntest btest ctest','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="(k*cos(x)/y)+(m*cos(z)/t)"')
Flow('Gtest','atest dtest theta1test VPupwntest phi2test VSlowwntest','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="x-y*cos(z)/t*cos(k)/m"')
Flow('Htest','atest dtest theta2test VPlowwntest phi1test VSupwntest','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="x-y*cos(z)/t*cos(k)/m"')
Flow('Dtest','Etest Ftest Gtest Htest ptest','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*y+z*t*k^2"')
Flow('rpptest','Dtest Ftest btest theta1test VPupwntest ctest theta2test VPlowwntest Htest ptest atest dtest phi2test VSlowwntest','math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} l=${SOURCES[6]} n=${SOURCES[7]} o=${SOURCES[8]} p=${SOURCES[9]} q=${SOURCES[10]} r=${SOURCES[11]} s=${SOURCES[12]} f=${SOURCES[13]} output="(1/x) * (y*(z*(cos(t)/k) - m*(cos(l)/n)) - o*p^2 * (q + r*(cos(t)/k)*(cos(s)/f)))" | real')

# Plot to QC

for case in ('VPtest','VStest','RHOtest'):
   graph=''
   if case=='VPtest':
      graph+='plotcol=6 title="Vp" label2=Vp unit2="m/s"'
   if case=='VStest':
      graph+='plotcol=5 title="Vs" label2=Vs unit2="m/s"'
   if case=='RHOtest':
      graph+='plotcol=4 title="Rho" label2=Rho unit2="kg/m3"'
   if case=='rpp':
      graph+='plotcol=7 title="Rpp" label2= unit2='
   Plot(case,['DEPTHtest',case],
        '''
        cmplx ${SOURCES[1]} | window |
        graph grid=y transp=y yreverse=y label1=Depth unit1=m labelsz=12
        ''' + graph)
Plot('rpptest','put o1=3220.22 d1=0.762 | graph transp=y grid=y yreverse=y symbol=* symbolsz=10 labelsz=12 label2= unit2= title="Rpp" label1=Depth unit1=m min2=-0.12 max2=0.12')

Result('QCtest','VPtest VStest RHOtest rpptest','SideBySideAniso')

# Initialize parameters

#Flow('W1-0-30',None,'spike n2=7 n1=300 mag=0 | noise seed=42 mean=0 var=1 | math output="input*sqrt(1/7)" | put d1=0.762 o1=2193.04 d2=1 o2=0')
Flow('W1-0-30-1 W2-0-30-1',None,'inittwolayer n1=300 n2=7 w2=${TARGETS[1]} mean=0 var=0.1 seed=42')
Flow('W1-0-30','W1-0-30-1','transp | put d1=0.762 o1=2193.04 d2=1 o2=0')
Flow('W2-0-30','W2-0-30-1','transp | put d1=0.762 o1=2193.04 d2=1 o2=0')

Flow('b1-0-30',None,'spike n1=300 mag=0 n2=1 | put d1=0.762 o1=2193.04 d2=1 o2=0')
#Flow('W2-0-30',None,'spike n1=300 mag=0 n2=1 | noise seed=42 mean=0 var=1 | math output="input*sqrt(1/300)" | put d1=0.762 o1=2193.04 d2=1 o2=0')
#Flow('W2-0-30',None,'inittwolayer n1=300 n2=1 mean=0 var=0.1 seed=42')
Flow('b2-0-30',None,'spike n1=1 mag=0 n2=1 | put d1=0.762 o1=2193.04 d2=1 o2=0')
#i=1

Flow('vW1-0-30',None,'spike n2=7 n1=300 mag=0')
Flow('vb1-0-30',None,'spike n2=1 n1=300 mag=0')
Flow('vW2-0-30',None,'spike n2=300 n1=1 mag=0')
Flow('vb2-0-30',None,'spike n2=1 n1=1 mag=0')

Flow('sW1-0-30',None,'spike n2=7 n1=300 mag=0')
Flow('sb1-0-30',None,'spike n2=1 n1=300 mag=0')
Flow('sW2-0-30',None,'spike n2=300 n1=1 mag=0')
Flow('sb2-0-30',None,'spike n2=1 n1=1 mag=0')

Flow('lossm vlossm W1m b1m W2m b2m','Xtrainpatch Ytrainpatch Xval Yval W1-0-30 b1-0-30 W2-0-30 b2-0-30','twolayer label=${SOURCES[1]} valdata=${SOURCES[2]} vallabel=${SOURCES[3]} niter=100 lr=0.001 valloss=${TARGETS[1]} weight1out=${TARGETS[2]} bias1out=${TARGETS[3]} weight2out=${TARGETS[4]} bias2out=${TARGETS[5]} weight1=${SOURCES[4]} bias1=${SOURCES[5]} weight2=${SOURCES[6]} bias2=${SOURCES[7]} act=0 opt=1 seed=42 stop=20 lossfunc=0 reg=0 alpha=0')

Flow('lossa vlossa W1a b1a W2a b2a','Xtrainpatch Ytrainpatch Xval Yval W1-0-30 b1-0-30 W2-0-30 b2-0-30','twolayer label=${SOURCES[1]} valdata=${SOURCES[2]} vallabel=${SOURCES[3]} niter=100 lr=0.0001 valloss=${TARGETS[1]} weight1out=${TARGETS[2]} bias1out=${TARGETS[3]} weight2out=${TARGETS[4]} bias2out=${TARGETS[5]} weight1=${SOURCES[4]} bias1=${SOURCES[5]} weight2=${SOURCES[6]} bias2=${SOURCES[7]} act=0 opt=2 seed=42 stop=40 lossfunc=0 reg=0 alpha=0')

Flow('lossa10 vlossa10 W1a10 b1a10 W2a10 b2a10','Xtrainpatch2 Ytrainpatch2 Xval Yval W1-0-30 b1-0-30 W2-0-30 b2-0-30','twolayer label=${SOURCES[1]} valdata=${SOURCES[2]} vallabel=${SOURCES[3]} niter=100 lr=0.0001 valloss=${TARGETS[1]} weight1out=${TARGETS[2]} bias1out=${TARGETS[3]} weight2out=${TARGETS[4]} bias2out=${TARGETS[5]} weight1=${SOURCES[4]} bias1=${SOURCES[5]} weight2=${SOURCES[6]} bias2=${SOURCES[7]} act=0 opt=2 seed=42 stop=40 lossfunc=0 reg=0 alpha=0')

Flow('lossa10reg1 vlossa10reg1 W1a10reg1 b1a10reg1 W2a10reg1 b2a10reg1','Xtrainpatch3 Ytrainpatch3 Xval Yval W1-0-30 b1-0-30 W2-0-30 b2-0-30','twolayer label=${SOURCES[1]} valdata=${SOURCES[2]} vallabel=${SOURCES[3]} niter=100 lr=0.0001 valloss=${TARGETS[1]} weight1out=${TARGETS[2]} bias1out=${TARGETS[3]} weight2out=${TARGETS[4]} bias2out=${TARGETS[5]} weight1=${SOURCES[4]} bias1=${SOURCES[5]} weight2=${SOURCES[6]} bias2=${SOURCES[7]} act=0 opt=2 seed=42 stop=40 lossfunc=1 reg=1 alpha=0')

Flow('loss-1a10 vloss-1a10 W1-1a10 b1-1a10 W2-1a10 b2-1a10','Xtrainpatch3 Ytrainpatch3 Xval Yval W1-0-30 b1-0-30 W2-0-30 b2-0-30','twolayer label=${SOURCES[1]} valdata=${SOURCES[2]} vallabel=${SOURCES[3]} niter=100 lr=0.0001 valloss=${TARGETS[1]} weight1out=${TARGETS[2]} bias1out=${TARGETS[3]} weight2out=${TARGETS[4]} bias2out=${TARGETS[5]} weight1=${SOURCES[4]} bias1=${SOURCES[5]} weight2=${SOURCES[6]} bias2=${SOURCES[7]} act=0 opt=2 seed=42 stop=40 lossfunc=1 reg=0 alpha=0')

Flow('lossa20 vlossa20 W1a20 b1a20 W2a20 b2a20','Xtrainpatch3 Ytrainpatch3 Xval Yval W1-0-30 b1-0-30 W2-0-30 b2-0-30','twolayer label=${SOURCES[1]} valdata=${SOURCES[2]} vallabel=${SOURCES[3]} niter=100 lr=0.0001 valloss=${TARGETS[1]} weight1out=${TARGETS[2]} bias1out=${TARGETS[3]} weight2out=${TARGETS[4]} bias2out=${TARGETS[5]} weight1=${SOURCES[4]} bias1=${SOURCES[5]} weight2=${SOURCES[6]} bias2=${SOURCES[7]} act=0 opt=2 seed=42 stop=40 lossfunc=0 reg=0 alpha=0')

Flow('loss vloss W1 b1 W2 b2','Xtrainpatch Ytrainpatch Xval Yval W1-0-30 b1-0-30 W2-0-30 b2-0-30','twolayer label=${SOURCES[1]} valdata=${SOURCES[2]} vallabel=${SOURCES[3]} niter=100 lr=0.001 valloss=${TARGETS[1]} weight1out=${TARGETS[2]} bias1out=${TARGETS[3]} weight2out=${TARGETS[4]} bias2out=${TARGETS[5]} weight1=${SOURCES[4]} bias1=${SOURCES[5]} weight2=${SOURCES[6]} bias2=${SOURCES[7]} act=0 opt=0 seed=42 stop=20 lossfunc=0 reg=0 alpha=0')  

Flow('losstanh vlosstanh W1tanh b1tanh W2tanh b2tanh','Xtrainpatch Ytrainpatch Xval Yval W1-0-30 b1-0-30 W2-0-30 b2-0-30','twolayer label=${SOURCES[1]} valdata=${SOURCES[2]} vallabel=${SOURCES[3]} niter=100 lr=0.001 valloss=${TARGETS[1]} weight1out=${TARGETS[2]} bias1out=${TARGETS[3]} weight2out=${TARGETS[4]} bias2out=${TARGETS[5]} weight1=${SOURCES[4]} bias1=${SOURCES[5]} weight2=${SOURCES[6]} bias2=${SOURCES[7]} act=1 opt=1 seed=42 stop=20 lossfunc=0 reg=0 alpha=0')

Flow('lossrelu vlossrelu W1relu b1relu W2relu b2relu','Xtrainpatch Ytrainpatch Xval Yval W1-0-30 b1-0-30 W2-0-30 b2-0-30','twolayer label=${SOURCES[1]} valdata=${SOURCES[2]} vallabel=${SOURCES[3]} niter=100 lr=0.001 valloss=${TARGETS[1]} weight1out=${TARGETS[2]} bias1out=${TARGETS[3]} weight2out=${TARGETS[4]} bias2out=${TARGETS[5]} weight1=${SOURCES[4]} bias1=${SOURCES[5]} weight2=${SOURCES[6]} bias2=${SOURCES[7]} act=2 opt=1 seed=42 stop=20 lossfunc=0 reg=0 alpha=0')

#lossistrain=[]
#lossisval=[]
#while i<num_epochs:
   #lossjtrain = 'losstrain-%d'%(i)
   #lossjval = 'lossval-%d'%(i)
   #lossjstrain = []
   #lossjsval = []
   #w1ii = 'W1val-%d'%i
   #b1ii = 'b1val-%d'%i
   #b1ii1 = 'b1val-%d-1'%i
   #w2ii = 'W2val-%d'%i
   #b2ii = 'b2val-%d'%i
   #b2ii1 = 'b2val-%d-1'%i
   #Xtrainshuff = 'Xtrainshuff-%d'%i
   #Ytrainshuff = 'Ytrainshuff-%d'%i
   #a1iival = 'prevala1val-%d'%(i)
   #z2iival = 'prevalz2val-%d'%(i)
   #lossiival = 'lossval-%d'%(i)
   #w2ii = 'W2-%d'%(i-1)
   #b2ii = 'b2-%d'%(i-1)
   #lossi = 'loss-%d'%(i)
   #j=0   

   # Validation
   
   #Flow(w1ii,'W1-%d-30'%(i-1),'cp')
   #Flow(w2ii,'W2-%d-30'%(i-1),'cp')
   #Flow(b1ii,'b1-%d-30'%(i-1),'cp')
   #Flow(b2ii,'b2-%d-30'%(i-1),'cp')
   
   #Flow(b1ii1,b1ii,'spray axis=2 n=100')
   #Flow(a1iival,[w1ii,'Xvaltransp',b1ii1],'matmult2 mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input+x" | math output="(exp(input)-exp(-input))/(exp(input)+exp(-input))"')
   #Flow(b2ii1,b2ii,'spray axis=2 n=100')
   #Flow(z2iival,[w2ii,a1iival,b2ii1],'matmult2 mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input+x" | transp')
   #Flow(lossiival,[z2iival,'Yval'],'math x=${SOURCES[0]} y=${SOURCES[1]} output="(x-y)^2" | stack axis=1')
   #jval=0
   #while jval<100:
      #lossjval = 'lossval-%d'%(j)
      # Forward
      #xijval = 'Xval-%d-%d'%(i,jval)
      #yijval = 'Yval-%d-%d'%(i,jval)
      #a1ijval = 'prevala1-%d-%d'%(i,jval)
      #z2ijval = 'prevalz2-%d-%d'%(i,jval)
      #lossijval = 'lossval-%d-%d'%(i,jval)

      #Flow(xijval,'Xval','window n1=10 f1=%d | transp'%(jval))
      #Flow(yijval,'Yval','window n1=10 f1=%d'%(jval))
      #Flow(b1ii1,b1ii,'spray axis=2 n=10')
      #Flow(a1ijval,[w1ii,xijval,b1ii1],'matmult2 mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input+x" | math output="1/(1+exp(-input))"')
      #Flow(b2ii1,b2ii,'spray axis=2 n=10')
      #Flow(z2ijval,[w2ii,a1ijval,b2ii1],'matmult2 mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input+x" | transp')
      #Flow(lossijval,[z2ijval,yijval],'math x=${SOURCES[0]} y=${SOURCES[1]} output="(x-y)^2" | stack axis=1')
      #lossjsval.append(lossijval)
      #jval = jval+10
   #Flow([Xtrainshuff,Ytrainshuff],'Xtrainpatch Ytrainpatch','shuffle1 pi2=${SOURCES[1]} po2=${TARGETS[1]} seed=%d'%i)
   #Flow('Ytrainshuff','Ytrain','shuffle axis=1 seed=%d'%i)
   # Training
   #while j<31:
      #t+=1
      #lossjtrain = 'losstrain-%d'%(j)
      #w1ij = 'W1-%d-%d'%(i,j)
      #b1ij = 'b1-%d-%d'%(i,j)
      #w2ij = 'W2-%d-%d'%(i,j)
      #w2ij1 = 'W2-%d-%d-1'%(i,j)
      #b2ij = 'b2-%d-%d'%(i,j)
      #if j==0:
         #w2iij = 'W2-%d-%d'%(i-1,30)
         #b2iij = 'b2-%d-%d'%(i-1,30)
         #w1iij = 'W1-%d-%d'%(i-1,30)
         #b1iij = 'b1-%d-%d'%(i-1,30)
         #b1iij1 = 'b1-%d-%d-1'%(i-1,30)
         #b2iij1 = 'b2-%d-%d-1'%(i-1,30)
         #vW1iij = 'vW1-%d-%d'%(i-1,30)
         #vW2iij = 'vW2-%d-%d'%(i-1,30)
         #vb1iij = 'vb1-%d-%d'%(i-1,30)
         #vb2iij = 'vb2-%d-%d'%(i-1,30)

         #sW1iij = 'sW1-%d-%d'%(i-1,30)
         #sW2iij = 'sW2-%d-%d'%(i-1,30)
         #sb1iij = 'sb1-%d-%d'%(i-1,30)
         #sb2iij = 'sb2-%d-%d'%(i-1,30)
      #else:
         #w2iij = 'W2-%d-%d'%(i,j-1)
         #b2iij = 'b2-%d-%d'%(i,j-1)
         #w1iij = 'W1-%d-%d'%(i,j-1)
         #b1iij = 'b1-%d-%d'%(i,j-1)
         #b1iij1 = 'b1-%d-%d-1'%(i,j-1)
         #b2iij1 = 'b2-%d-%d-1'%(i,j-1)
         #vW1iij = 'vW1-%d-%d'%(i,j-1)
         #vW2iij = 'vW2-%d-%d'%(i,j-1)
         #vb1iij = 'vb1-%d-%d'%(i,j-1)
         #vb2iij = 'vb2-%d-%d'%(i,j-1)

         #sW1iij = 'sW1-%d-%d'%(i,j-1)
         #sW2iij = 'sW2-%d-%d'%(i,j-1)
         #sb1iij = 'sb1-%d-%d'%(i,j-1)
         #sb2iij = 'sb2-%d-%d'%(i,j-1)
      #xij = 'Xtrain-%d-%d'%(i,j)
      #xij1 = 'Xtrain-%d-%d-1'%(i,j)
      #yij = 'Ytrain-%d-%d'%(i,j)
      #a1ij = 'pretraina1-%d-%d'%(i,j)
      #a1ij1 = 'pretraina1-%d-%d-1'%(i,j)
      #z2ij = 'pretrainz2-%d-%d'%(i,j)
      #errij = 'err_output-%d-%d'%(i,j)
      #errij1 = 'err_output-%d-%d-1'%(i,j)
      #grad_W2ij = 'grad_W2-%d-%d'%(i,j)
      #grad_W1ij = 'grad_W1-%d-%d'%(i,j)
      #err_hiddenij='err_hidden-%d-%d'%(i,j)
      #err_hiddenij1='err_hidden-%d-%d-1'%(i,j)
      #derivativeij = 'derivative-%d-%d'%(i,j)
      #lossijtrain = 'losstrain-%d-%d'%(i,j)      
      #vW1ij = 'vW1-%d-%d'%(i,j)
      #vW2ij = 'vW2-%d-%d'%(i,j)
      #vb1ij = 'vb1-%d-%d'%(i,j)
      #vb2ij = 'vb2-%d-%d'%(i,j)  

      #sW1ij = 'sW1-%d-%d'%(i,j)
      #sW2ij = 'sW2-%d-%d'%(i,j)
      #sb1ij = 'sb1-%d-%d'%(i,j)
      #sb2ij = 'sb2-%d-%d'%(i,j)    

      # Forward
      #Flow(xij,Xtrainshuff,'window n1=1 f1=%d | transp'%j)
      #Flow(yij,Ytrainshuff,'window n1=1 f1=%d'%j)
      #Flow(b1iij1,b1iij,'spray axis=2 n=20')
      #Flow(a1ij,[w1iij,xij,b1iij1],'matmult2 mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input+x" | math output="(exp(input)-exp(-input))/(exp(input)+exp(-input))"')
      #Flow(b2iij1,b2iij,'spray axis=2 n=20')
      #Flow(z2ij,[w2iij,a1ij,b2iij1],'matmult2 <$SOURCE mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input+x" | transp')
      
      # Backward
      #Flow(errij,[z2ij,yij],'math x=${SOURCES[0]} y=${SOURCES[1]} output="x-y" | transp plane=12 | math output="input/20"')
      #Flow(a1ij1,a1ij,'transp plane=12')
      #Flow(grad_W2ij,[errij,a1ij1],'matmult2 mat=${SOURCES[1]}')
      #Flow(vW2ij,[vW2iij,grad_W2ij],'math x=${SOURCES[1]} output="(%g*input + (1-%g)*x)"'%(beta1,beta1))
      #!sfrm grad_W2ij
      #Flow(vb2ij,[errij,vb2iij],'stack axis=2 norm=n | math x=${SOURCES[1]} output="(%g*x + (1-%g)*input)"'%(beta1,beta1))
      #Flow(sW2ij,[sW2iij,grad_W2ij],'math x=${SOURCES[1]} output="(%g*input + (1-%g)*x^2)/(1-%g^%g)"'%(beta2,beta2,beta2,t))
      #Flow(sb2ij,[errij,sb2iij],'stack axis=2 norm=n | math x=${SOURCES[1]} output="(%g*x + (1-%g)*input^2)/(1-%g^%g)"'%(beta2,beta2,beta2,t))
      #Flow(w2ij,[w2iij,grad_W2ij],'math x=${SOURCES[1]} output="input-%g*x"'%(learning_rate))
      #Flow(w2ij,[w2iij,vW2ij],'math x=${SOURCES[1]} output="input-%g*x"'%(learning_rate))
      #Flow(b2ij,[errij,b2iij],'stack axis=2 norm=n | math x=${SOURCES[1]} output="input-%g*x"'%(learning_rate))      
      #Flow(b2ij,[b2iij,vb2ij],'math x=${SOURCES[1]} output="input-%g*x"'%(learning_rate))      

      #Flow(derivativeij,a1ij,'math output="1-(tanh(input))^2" | transp')
      #Flow(errij1,errij,'transp | spray axis=1 n=1')
      #Flow(w2ij1,w2ij,'spray axis=1 n=1')
      #Flow(err_hiddenij,[errij,derivativeij,w2ij],'matmult2 mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input*x" | transp plane=12')
      #Flow(None,errij,'sfrm')
      #Flow(xij1,Xtrainshuff,'window n1=1 f1=%d'%j)
      #Flow(grad_W1ij,[err_hiddenij,xij1],'spray axis=2 n=20 | matmult2 mat=${SOURCES[1]}')
      #Flow(vW1ij,[vW1iij,grad_W1ij],'math x=${SOURCES[1]} output="(%g*input + (1-%g)*x)"'%(beta1,beta1))
      #!sfrm grad_W1ij
      #Flow(vb1ij,[err_hiddenij,vb1iij],'math x=${SOURCES[1]} output="(%g*x + (1-%g)*input)"'%(beta1,beta1))
      #Flow(sW1ij,[sW1iij,grad_W1ij],'math x=${SOURCES[1]} output="(%g*input + (1-%g)*x^2)/(1-%g^%g)"'%(beta2,beta2,beta2,t))
      #Flow(sb1ij,[err_hiddenij,sb1iij],'math x=${SOURCES[1]} output="(%g*x + (1-%g)*input^2)/(1-%g^%g)"'%(beta2,beta2,beta2,t))
      #Flow(w1ij,[w1iij,grad_W1ij],'math x=${SOURCES[1]} output="input-%g*x"'%(learning_rate))
      #Flow(b1ij,[b1iij,err_hiddenij],'math x=${SOURCES[1]} output="input-%g*x"'%(learning_rate))
      #!sfrm err_hiddenij
      #Flow(w1ij,[w1iij,vW1ij],'math x=${SOURCES[1]} output="input-%g*x"'%(learning_rate))
      #Flow(b1ij,[b1iij,vb1ij],'math x=${SOURCES[1]} output="input-%g*x"'%(learning_rate)) 
      #Flow(lossijtrain,[z2ij,yij],'math x=${SOURCES[0]} y=${SOURCES[1]} output="(x-y)^2" | stack axis=1')
      #lossjstrain.append(lossijtrain)
      #j = j+1
      #import numpy as np
      #learning_rate = init_learning_rate*np.exp(-0.1*t)
   #Flow(lossjtrain,lossjstrain,'add ${SOURCES[0:%g]} | math output="input/31"'%len(lossjstrain))
   #lossistrain.append(lossjtrain)

   #Flow(lossjval,lossjsval,'add ${SOURCES[0:%g]} | math output="input/31"'%len(lossjsval))
   #lossisval.append(lossiival)
  
   #i=i+1
   #import numpy as np
   

# Plot loss

Plot('loss','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-4 max2=-1 title="MSE" plotcol=7 grid=y')
Plot('vloss','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" min2=-4 max2=-1 label2="Log loss" unit1= unit2= title="MSE" wanttitle=n wantaxis=n plotcol=5 grid=y')
Result('trainloss','loss vloss','Overlay')

Plot('loss2','loss','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-4.5 max2=-1 title="MSE" plotcol=7 grid=y')
Plot('lossa','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-4.5 max2=-1 title="MSE" wanttitle=n wantaxis=n min1=0 max1=100 plotcol=6 grid=y')
Plot('lossa10','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-5.0 max2=-1.5 title="MSE" wanttitle=y wantaxis=y min1=0 max1=100 plotcol=6 grid=y')
Plot('lossa10reg1','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-5.0 max2=-1.5 title="MSE" wanttitle=y wantaxis=y min1=0 max1=100 plotcol=6 grid=y')
Plot('loss-1a10','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-5.0 max2=-1.5 title="MSE" wanttitle=n wantaxis=n min1=0 max1=100 plotcol=7 grid=y')
Plot('lossa20','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-5.0 max2=-1.5 title="MSE" wanttitle=y wantaxis=y min1=0 max1=100 plotcol=5 grid=y')
Plot('lossa-2','lossa','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-5.0 max2=-1.5 title="MSE" wanttitle=n wantaxis=n min1=0 max1=100 plotcol=7 grid=y')
Plot('lossm','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-4.5 max2=-1 title="MSE" wanttitle=n wantaxis=n min1=0 max1=100 plotcol=5 grid=y')
Plot('losstanh','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-4 max2=-1 title="MSE" wanttitle=n wantaxis=n min1=0 max1=100 plotcol=6 grid=y')
Plot('lossrelu','put o1=1 d1=1 | math output="log(input)/log(10)" | graph label1="Epoch" label2=" Log loss" unit1= unit2= min2=-4 max2=-1 title="MSE" wanttitle=n wantaxis=n min1=0 max1=100 plotcol=5 grid=y')

Result('lossopt','loss2 lossa lossm','Overlay')
Result('lossact','loss losstanh lossrelu','Overlay')
Result('lossbatch','lossa-2 lossa10 lossa20','Overlay')
Result('lossloss','lossa20 loss-1a10','Overlay')
Result('lossreg','loss-1a10 lossa10reg1','Overlay')

# Plot results

#postz2is=[]
#for i in range (0,400,20):
   #postxi = 'postXtrain-%d'%i
   #posta1i = 'posttraina1-%d'%i
   #postz2i = 'posttrainz2-%d'%i

   #Flow(postxi,'Xtrain','window n1=20 f1=%d | transp'%i)
   #Flow('b1train-90-30','b1-90-30','spray axis=2 n=20')
   #Flow(posta1i,['W1-90-30',postxi,'b1train-90-30'],'matmult2 mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input+x" | math output="1/(1+exp(-input))"')
   #Flow('b2train-90-30','b2-90-30','spray axis=2 n=20')
   #Flow(postz2i,['W2-90-30',posta1i,'b2train-90-30'],'matmult2 mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input+x" | transp')
   #postz2is.append(postz2i)

#Flow('post_train',postz2is,'cat axis=1 ${SOURCES[1:%g]}'%len(postz2is))

#Flow('b1train','b1','spray axis=2 n=400')
#Flow('Xtraintransp','Xtrain','transp plane=12')
#Flow('posttraina1','W1 Xtraintransp b1train','matmult2 mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input+x" | math output="1/(1+exp(-input))"')
#Flow('b2train','b2','spray axis=2 n=400')
#Flow('post_train','W2 posttraina1 b2train','transp | matmult2 mat=${SOURCES[1]} | math x=${SOURCES[2]} output="input+x" | transp')

Flow('W1transp','W1','transp')
Flow('W1atransp','W1a','transp')
Flow('W1mtransp','W1m','transp')
Flow('W1-1a10transp','W1-1a10','transp')
Flow('W1a10transp','W1a10','transp')
Flow('W1a10reg1transp','W1a10reg1','transp')

Flow('post_train','Xtrain W1transp b1 W2 b2','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

Flow('pre_train','Xtrain W1-0-30 b1-0-30 W2-0-30 b2-0-30','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

Flow('post_traina10','Xtrain W1a10transp b1a10 W2a10 b2a10','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

Flow('post_traina10reg1','Xtrain W1a10reg1transp b1a10reg1 W2a10reg1 b2a10reg1','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

Flow('post_train-1a10','Xtrain W1-1a10transp b1-1a10 W2-1a10 b2-1a10','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

Flow('post_traina','Xtrain W1atransp b1a W2a b2a','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

Flow('post_trainm','Xtrain W1mtransp b1m W2m b2m','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

#Flow('post_traintanh','Xtrain W1tanh b1tanh W2tanh b2tanh','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=1')

#Flow('post_trainrelu','Xtrain W1relu b1relu W2relu b2relu','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=2')

Plot('pre_train','window n1=100 | put o1=0 d1=1 | graph title="Training data sigmoid" label2="y" plotcol=1 unit2="output signal" wanttitle=n wantaxis=n label1="Data instance number" min2=-0.3 max2=0.3 unit1= ')

Plot('post_train','window n1=100 | put o1=0 d1=1 | graph title="Training data sigmoid" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.3 max2=0.3 unit1= ')

Plot('post_traina','window n1=100 | put o1=0 d1=1 | graph title="Training data Adam" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.3 max2=0.3 unit1= ')

Plot('post_trainm','window n1=100 | put o1=0 d1=1 | graph title="Training data Momentum" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.3 max2=0.3 unit1= ')

Plot('post_traina10','window n1=100 | put o1=0 d1=1 | graph title="Training data Adam" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.3 max2=0.3 unit1= ')

Plot('post_traina10reg1','window n1=100 | put o1=0 d1=1 | graph title="Training data Adam" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.3 max2=0.3 unit1= ')

Plot('post_train-1a10','window n1=100 | put o1=0 d1=1 | graph title="Training data L1" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.3 max2=0.3 unit1= ')

#Plot('post_traintanh','window n1=100 | put o1=0 d1=1 | graph title="Training data tanh" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.3 max2=0.3 unit1= ')

#Plot('post_trainrelu','put o1=0 d1=1 | graph title="Training data ReLU" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.3 max2=0.3 unit1= ')

Plot('Ytrain','window n1=100 | put o1=0 d1=1 | graph title="Training data" label2="y" plotcol=5 unit2="output signal" wanttitle=n wantaxis=n label1="Data instance number" min2=-0.3 max2=0.3 unit1= ')

# MSE

Flow('train-loss','post_train Ytrain-1','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')
Flow('train-lossm','post_trainm Ytrain','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')
Flow('train-losstanh','post_traintanh Ytrain','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')
Flow('train-lossrelu','post_trainrelu Ytrain','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')      
Flow('train-lossa','post_traina Ytrain','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')

Result('trainresult','post_train Ytrain pre_train','Overlay')
#Result('trainresulttanh','post_traintanh Ytrain-1','Overlay')
Result('trainresultm','post_trainm Ytrain','Overlay')
#Result('trainresultrelu','post_trainrelu Ytrain-1','Overlay')
Result('trainresulta','post_traina Ytrain','Overlay')
Result('trainresulta10','post_traina10 Ytrain','Overlay')
Result('trainresult-1a10','post_train-1a10 Ytrain','Overlay')
Result('trainresulta10reg1','post_traina10reg1 Ytrain','Overlay')

# Validation

Flow('post_val','Xval W1transp b1 W2 b2','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')
Flow('post_vala','Xval W1atransp b1a W2a b2a','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')
Flow('post_valm','Xval W1mtransp b1m W2m b2m','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')
Flow('post_valtanh','Xval-1 W1tanh b1tanh W2tanh b2tanh','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=1')

Plot('post_val','put o1=0 d1=1 | graph title="Validation data sigmoid" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.4 max2=0.2 unit1= ')
Plot('post_vala','put o1=0 d1=1 | graph title="Validation data Adam" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.4 max2=0.2 unit1= ')
Plot('post_valm','put o1=0 d1=1 | graph title="Validation data Momentum" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.4 max2=0.2 unit1= ')
Plot('post_valtanh','put o1=0 d1=1 | graph title="Validation data sigmoid" label2="y" plotcol=6 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.5 max2=0.5 unit1= ')
Plot('Yval','put o1=0 d1=1 | graph title="Validation data" label2="y" plotcol=5 unit2="output signal" wanttitle=n wantaxis=n label1="Data instance number" min2=-0.4 max2=0.2 unit1= ')

# MSE

Flow('val-loss','post_val Yval','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')
Flow('val-lossa','post_vala Yval','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')
Flow('val-lossm','post_valm Yval','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')

Result('valresult','post_val Yval','Overlay')
Result('valresulta','post_vala Yval','Overlay')
Result('valresultm','post_valm Yval','Overlay')

#Flow('post_valtanh','Xval W1tanh b1tanh W2tanh b2tanh','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=1')

#Plot('post_valtanh','put o1=0 d1=1 | graph title="Validation data tanh" label2="y" plotcol=6 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.5 max2=0.5 unit1= ')

# MSE

Flow('val-losstanh','post_valtanh Yval','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')

Result('valresulttanh','post_valtanh Yval-1','Overlay')

Flow('post_valrelu','Xval W1relu b1relu W2relu b2relu','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=2')

Plot('post_valrelu','put o1=0 d1=1 | graph title="Validation data ReLU" label2="y" plotcol=6 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.5 max2=0.5 unit1= ')

Flow('val-lossrelu','post_valrelu Yval','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')

Result('valresultrelu','post_valrelu Yval','Overlay')

# Test

Flow('post_test','Xtest W1transp b1 W2 b2','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

Flow('post_testa','Xtest W1atransp b1a W2a b2a','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

Flow('post_testm','Xtest W1mtransp b1m W2m b2m','twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

Plot('post_test','window n1=100 | put o1=0 d1=1 | graph title="Testing data sigmoid" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.12 max2=0.12 unit1= ')

Plot('post_testa','window n1=100 | put o1=0 d1=1 | graph title="Testing data Adam" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.12 max2=0.12 unit1= ')

Plot('post_testm','window n1=100 | put o1=0 d1=1 | graph title="Testing data Momentum" label2="y" plotcol=7 unit2="output signal" wanttitle=y wantaxis=y label1="Data instance number" min2=-0.12 max2=0.12 unit1= ')

Plot('Ytest','rpptest','window n1=100 | put o1=0 d1=1 | graph title="Testing data" label2="y" plotcol=5 unit2="output signal" wanttitle=n wantaxis=n label1="Data instance number" min2=-0.12 max2=0.12 unit1= ')

# MSE

Flow('test-loss','post_test rpptest','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')
Flow('test-lossa','post_testa rpptest','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')
Flow('test-lossm','post_testm rpptest','math output="(input-x)^2" x=${SOURCES[1]} | stack axis=1')

Result('testresult','post_test Ytest','Overlay')
Result('testresulta','post_testa Ytest','Overlay')
Result('testresultm','post_testm Ytest','Overlay')

# Test with different incidence angle

Flow('thetawntest2',None,'spike o1=0 n1=60 d1=1 | math output=x1 | put o1=0 d1=1')
Flow('thetatest2',None,'spike o1=0 n1=60 d1=1 | math output=x1 | put o1=0 d1=1 | math output="(input-9.97123)/5.97377"')
Flow('Xtest2','Xtest','window f1=76 n1=1 n2=6 | transp plane=12')
Flow('VPupwntest2','VPupwntest','window f1=76 n1=1')
Flow('VSupwntest2','VSupwntest','window f1=76 n1=1')
Flow('RHOupwntest2','RHOupwntest','window f1=76 n1=1')
Flow('VPlowwntest2','VPlowwntest','window f1=76 n1=1')
Flow('VSlowwntest2','VSlowwntest','window f1=76 n1=1')
Flow('RHOlowwntest2','RHOlowwntest','window f1=76 n1=1')

for l in range (60):
   # Create testing label
   # Zoeppritz solution for P-P reflectivity
   from math import pi
   thetawntest2='thetawntest2-%d'%l
   theta1test2='thetha1test2-%d'%l
   Xtest2='Xtest2-%d'%l
   ptest2='ptest2-%d'%l
   theta2test2='theta2test2-%d'%l
   thetatest2='thetatest2-%d'%l
   phi1test2='phi1test2-%d'%l
   phi2test2='phi2test2-%d'%l
   atest2='atest2-%d'%l
   btest2='btest2-%d'%l   
   ctest2='ctest2-%d'%l
   dtest2='dtest2-%d'%l
   Dtest2='Dtest2-%d'%l  
   Etest2='Etest2-%d'%l   
   Ftest2='Ftest2-%d'%l
   Gtest2='Gtest2-%d'%l
   Htest2='Htest2-%d'%l
   rpptest2='rpptest2-%d'%l

   Flow(thetawntest2,'thetawntest2','window n1=1 f1=%d'%l)
   Flow(thetatest2,'thetatest2','window n1=1 f1=%d | put n2=1'%l)
   Flow(Xtest2,['Xtest2',thetatest2],'cat axis=2 ${SOURCES[1]} | put o1=2193.04')
   Flow(theta1test2,thetawntest2,'math output="input*%g/180" | rtoc'%(pi))
   Flow(ptest2,['VPupwntest',theta1test2],'window f1=75 n1=1 | math x=${SOURCES[1]} output="sin(x)/input"')
   Flow(theta2test2,['VPlowwntest',ptest2],'window f1=75 n1=1 | math y=${SOURCES[1]} output="asin(input*y)"')
   Flow(phi1test2,['VSupwntest',ptest2],'window f1=75 n1=1 | math y=${SOURCES[1]} output="asin(input*y)"')
   Flow(phi2test2,['VSlowwntest',ptest2],'window f1=75 n1=1 | math y=${SOURCES[1]} output="asin(input*y)"')
   Flow(atest2,['RHOlowwntest2', phi2test2, 'RHOupwntest2', phi1test2],'math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*(1-2*sin(y)^2)-z*(1-2*sin(t)^2)"')
   Flow(btest2,['RHOlowwntest2',phi2test2, 'RHOupwntest2', phi1test2],'math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*(1-2*sin(y)^2)+2*z*sin(t)^2"')
   Flow(ctest2,['RHOupwntest2', phi1test2, 'RHOlowwntest2', phi2test2],'math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*(1-2*sin(y)^2)+2*z*sin(t)^2"')
   Flow(dtest2,'RHOlowwntest2 VSlowwntest2 RHOupwntest2 VSupwntest2','math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="2*(x*y^2-z*t^2)"')
   Flow(Etest2,[theta1test2, 'VPupwntest2', theta2test2,'VPlowwntest2', btest2, ctest2],'math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="(k*cos(x)/y)+(m*cos(z)/t)"')
   Flow(Ftest2,[phi1test2, 'VSupwntest2', phi2test2, 'VSlowwntest2', btest2, ctest2],'math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="(k*cos(x)/y)+(m*cos(z)/t)"')
   Flow(Gtest2,[atest2, dtest2, theta1test2, 'VPupwntest2', phi2test2, 'VSlowwntest2'],'math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="x-y*cos(z)/t*cos(k)/m"')
   Flow(Htest2,[atest2, dtest2, theta2test2, 'VPlowwntest2', phi1test2, 'VSupwntest2'],'math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} output="x-y*cos(z)/t*cos(k)/m"')
   Flow(Dtest2,[Etest2, Ftest2, Gtest2, Htest2, ptest2],'math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} output="x*y+z*t*k^2"')
   Flow(rpptest2,[Dtest2,Ftest2,btest2,theta1test2, 'VPupwntest2', ctest2, theta2test2, 'VPlowwntest2', Htest2, ptest2, atest2, dtest2, phi2test2, 'VSlowwntest2'],'math k=${SOURCES[4]} x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]} t=${SOURCES[3]} m=${SOURCES[5]} l=${SOURCES[6]} n=${SOURCES[7]} o=${SOURCES[8]} p=${SOURCES[9]} q=${SOURCES[10]} r=${SOURCES[11]} s=${SOURCES[12]} f=${SOURCES[13]} output="(1/x) * (y*(z*(cos(t)/k) - m*(cos(l)/n)) - o*p^2 * (q + r*(cos(t)/k)*(cos(s)/f)))" | real')

# Forward

postz2istest2=[]
postz2istest2a=[]
postz2istest2m=[]
postz2istest2a10reg1=[]
rppstest2=[]
for i in range (0,60):
   postxitest2 = 'postXtest2-%d'%i
   posta1itest2 = 'posttest2a1-%d'%i
   postz2itest2 = 'posttest2z2-%d'%i
   postz2itest2a = 'posttest2z2a-%d'%i
   postz2itest2m = 'posttest2z2m-%d'%i
   postz2itest2a10reg1 = 'posttest2z2a10reg1-%d'%i
   xtest2 = 'Xtest2-%d'%i   
   rpptest2 = 'rpptest2-%d'%i
   
   Flow(postz2itest2,[xtest2,'W1transp','b1','W2','b2'], 'twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')   
   Flow(postz2itest2a,[xtest2,'W1atransp','b1a','W2a','b2a'], 'twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

   Flow(postz2itest2m,[xtest2,'W1mtransp','b1m','W2m','b2m'], 'twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')
   
   Flow(postz2itest2a10reg1,[xtest2,'W1a10reg1transp','b1a10reg1','W2a10reg1','b2a10reg1'], 'twolayerfwd weight1=${SOURCES[1]} bias1=${SOURCES[2]} weight2=${SOURCES[3]} bias2=${SOURCES[4]} act=0')

   postz2istest2.append(postz2itest2)
   postz2istest2a.append(postz2itest2a)
   postz2istest2m.append(postz2itest2m)
   postz2istest2a10reg1.append(postz2itest2a10reg1)
   rppstest2.append(rpptest2)

Flow('Ytest2',rppstest2,'cat axis=1 ${SOURCES[1:%g]}'%len(rppstest2))

Flow('post_test2',postz2istest2,'cat axis=1 ${SOURCES[1:%g]}'%len(postz2istest2))

Flow('post_test2a',postz2istest2a,'cat axis=1 ${SOURCES[1:%g]}'%len(postz2istest2a))

Flow('post_test2m',postz2istest2m,'cat axis=1 ${SOURCES[1:%g]}'%len(postz2istest2m))

Flow('post_test2a10reg1',postz2istest2a10reg1,'cat axis=1 ${SOURCES[1:%g]}'%len(postz2istest2a10reg1))

Plot('post_test2','put o1=0 d1=1 | graph title="Testing data sigmoid" label2="Amplitude" plotcol=7 unit2= wanttitle=y wantaxis=y min2=-0.07 max2=0.001 label1="Incidence angle" unit1="degree"')

Plot('post_test2a','put o1=0 d1=1 | graph title="Testing data Adam" label2="Amplitude" plotcol=7 unit2= wanttitle=y wantaxis=y min2=-0.07 max2=0.001 label1="Incidence angle" unit1="degree"')

Plot('Ytest2-1','Ytest2','put o1=0 d1=1 | graph title="Testing data Adam" label2="Amplitude" plotcol=5 unit2= wanttitle=y wantaxis=y min2=-0.022 max2=0.001 label1="Incidence angle" unit1="degree"')

Plot('post_test2a10reg1','put o1=0 d1=1 | graph title="Testing data Adam" label2="Amplitude" plotcol=7 unit2= wanttitle=n wantaxis=n min2=-0.022 max2=0.001 label1="Incidence angle" unit1="degree"')

Plot('post_test2m','put o1=0 d1=1 | graph title="Testing data Momentum" label2="Amplitude" plotcol=7 unit2= wanttitle=y wantaxis=y min2=-0.07 max2=0.001 label1="Incidence angle" unit1="degree"')

Plot('Ytest2','put o1=0 d1=1 | graph title="Testing data" label2="y" plotcol=5 unit2= wanttitle=n wantaxis=n label1="Incidence angle" min2=-0.07 max2=0.001 unit1="degree"')

Result('testresult2','post_test2 Ytest2','Overlay')
Result('testresult2a','post_test2a Ytest2','Overlay')
Result('testresult2m','post_test2m Ytest2','Overlay')
Result('testresult2a10reg1','post_test2a10reg1 Ytest2-1','Overlay')

End()

